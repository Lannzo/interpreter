<statement>
= "if" "(" <exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <logical_or_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <logical_and_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <equality_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <relational_exp> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <additive_exp> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <multiplicative_exp> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <power_exp> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <unary_exp> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <factor> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" <identifier> ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <multiplicative_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <power_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <unary_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <factor> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <const> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" <int> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <block-item-list> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <block-item-list> <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <block-item> <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <declaration> <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <variable_declaration> <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" <data_type> <identifier> ";" <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int <identifier> ";" <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" <statement> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <logical_or_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <logical_and_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <equality_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <relational_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <additive_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <multiplicative_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <power_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <unary_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <factor> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <const> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" <int> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" <statement>
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <logical_or_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <logical_and_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <equality_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <equality_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <relational_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <additive_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <multiplicative_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <power_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <unary_exp> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <factor> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" <identifier> "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <relational_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <additive_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <multiplicative_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <power_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <unary_exp> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <factor> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <const> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" <int> ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" <block> [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" <block-item-list> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" <block-item> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" <statement> "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <logical_or_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <logical_and_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <equality_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <relational_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <additive_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <multiplicative_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <power_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <unary_exp> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <factor> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <const> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" <int> ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" [ "else" <block> | <statement> ]
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" <block>
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" <block-item-list> "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" <block-item> "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" <statement> "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <logical_or_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <logical_and_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <equality_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <relational_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <additive_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <multiplicative_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <power_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <unary_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" <unop> <unary_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" "-" <unary_exp> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" "-" <factor> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" "-" <const> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" "-" <int> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a ";" "return" 1 ";" "}" "else" "if" "(" z "==" 10 ")" "{" "return" 0 ";" "}" "else" "{" "return" "-" 1 ";" "}"