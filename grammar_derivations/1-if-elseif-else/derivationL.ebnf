<statement>
= <if_statement>
= "if" "(" <exp> ")" <block> [<else_clause>]
= "if" "(" <logical_or_exp> ")" <block> [<else_clause>]
= "if" "(" <logical_and_exp> ")" <block> [<else_clause>]
= "if" "(" <equality_exp> ")" <block> [<else_clause>]
= "if" "(" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" <relational_exp> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <additive_exp> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <multiplicative_exp> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <power_exp> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <unary_exp> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <factor> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" <identifier> ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" <multiplicative_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" <power_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" <unary_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" <factor> ")" <block> [<else_clause>]
= "if" "(" z ">" <const> ")" <block> [<else_clause>]
= "if" "(" z ">" <int> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" <block_item_list> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" <block_item> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" <variable_declaration> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" <data_type> <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" <else_clause>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" <if_statement>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <logical_or_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <logical_and_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <equality_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <equality_exp_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <relational_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <additive_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <multiplicative_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <power_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <unary_exp> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <factor> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" <identifier> "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <multiplicative_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <power_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <unary_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <factor> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <const> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" <int> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" <block_item_list> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" <block_item> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" <variable_declaration> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" <data_type> <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" <else_clause>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" <if_statement>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <logical_or_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <logical_and_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <equality_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <relational_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <relational_exp> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <additive_exp> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <multiplicative_exp> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <power_exp> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <unary_exp> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <factor> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" <identifier> "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <additive_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <multiplicative_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <power_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <unary_exp> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <factor> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <const> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" <int> ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" <block> [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" <block_item_list> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" <block_item> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" <variable_declaration> "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" <data_type> <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float <identifier> ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" [<else_clause>]
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" <else_clause>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" <block>
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" <block_item_list> "}"
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" <block_item> "}"
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" <variable_declaration> "}"
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" <data_type> <identifier> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" bool <identifier> ";" "}"
= "if" "(" z ">" 10 ")" "{" int a; "}" "else" "if" "(" z "==" 10 ")" "{" char b ";" "}" "else" "if" "(" z "<" 10 ")" "{" float c ";" "}" "else" "{" bool d ";" "}"
